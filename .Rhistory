install.packages("ggplot2")
library(ggplot2)
}
if(!require(ggridges)){
install.packages("ggridges")
library(ggridges)
}
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
if(!require(viridis)){
install.packages("viridis")
library(viridis)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(reshape)){
install.packages("reshape")
library(reshape)
}
if(!require(reshape2)){
install.packages("reshape2")
library(reshape2)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
gini <- read.csv("gini.csv", na.string = "")
exeption <- -which(names(gini) %in% c("STRUCTURE", "STRUCTURE_ID", "STRUCTURE_NAME","ACTION", "FREQ", "Frequency.of.observation", "MEASURE", "Measure", "STATISTICAL_OPERATION", "Statistical.operation", "UNIT_MEASURE", "Unit.of.measure", "DEFINITION", "Definition", "POVERTY_LINE", "Poverty.line", "Time.period","Observation.value", "OBS_STATUS", "Observation.status", "UNIT_MULT", "Unit.multiplier", "CURRENCY", "Currency", "DECIMALS", "Decimals", "PRICE_BASE", "Price.base", "BASE_PER", "Base.period", "CONF_STATUS", "Confidentiality.status"))
gini <- gini[,exeption]
gini <- dcast(gini, REF_AREA+Age+AGE+TIME_PERIOD ~ Methodology, value.var = "OBS_VALUE")
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini$Gini_coefficient <- ifelse(
is.na(gini$`Income definition since 2012`),
gini$`Income definition until 2011`,
gini$`Income definition since 2012`
)
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini22 <- gini[gini$TIME_PERIOD==2022,]
gini22plot <- ggplot(gini22, aes(x=Age, y=Gini_coefficient, fill=REF_AREA))
ggplotly(gini22plot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22a <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA<="FRA",]
gini22aplot <- ggplot(gini22a, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22aplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22b <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="GBR" & gini$REF_AREA<="NLD",]
gini22bplot <- ggplot(gini22b, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22bplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22c <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="NOR",]
gini22cplot <- ggplot(gini22c, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22cplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
giniGr <- gini[gini$REF_AREA=="GRC",]
giniWide <- dcast(gini, REF_AREA+TIME_PERIOD~ Age, value.var = "Gini_coefficient")
giniAge <- ggplot(giniWide, aes(x=`From 18 to 65 years`, y=`Over 65 years`))
ggplotly(giniAge+geom_point(aes(colour = REF_AREA))+
geom_smooth())
cor(giniWide$`From 18 to 65 years`, giniWide$`Over 65 years`, use="complete.obs")
lm(giniWide$`From 18 to 65 years` ~ giniWide$`Over 65 years`)
lm(giniWide$`From 18 to 65 years` ~ giniWide$`Over 65 years`)[1]
lm(giniWide$`From 18 to 65 years` ~ giniWide$`Over 65 years`)$Coefficients
lm(giniWide$`From 18 to 65 years` ~ giniWide$`Over 65 years`)$Intercept
coef(lm(giniWide$`From 18 to 65 years` ~ giniWide$`Over 65 years`))[1]
View(giniWide)
names(giniWide)
wilcox.test(`From 18 to 65 years`~`Over 65 years`, giniWide)
wilcox.test(`From 18 to 65 years`~`Over 65 years`, data=giniWide)
wilcox.test(From.18.to.65.years~Over.65.years, data=giniWide)
wilcox.test(giniWide$`From 18 to 65 years`~giniWide$`Over 65 years`, data=giniWide)
wilcox.test(giniWide$`From 18 to 65 years` ~ giniWide$`Over 65 years`, data=giniWide)
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(younger65 ~ older65, data=giniWide)
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(younger65 , older65, data=giniWide)
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(younger65 , older65, data=na.omit(giniWide))
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(younger65 ~ older65, data=na.omit(giniWide))
View(giniWide)
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(younger65 ~ older65, data=giniWide, correct=FALSE, exact=FALSE)
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(giniWide$younger65 ~ giniWide$older65, data=giniWide)
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(giniWide$younger65 ~giniWide$older65, data=giniWide)
wilcox.test(SLR0115_1_9_$CTWF ~ SLR0115_1_9_$Worm_Names, correct=FALSE, exact=FALSE)
wilcox.test(SLR0115_1_9_$Worm_Names~SLR0115_1_9_$CTWF, correct=FALSE, exact=FALSE)
giniWide$younger65 <- giniWide$`From 18 to 65 years`
giniWide$older65 <- giniWide$`Over 65 years`
wilcox.test(giniWide$older65 ~ giniWide$younger65, data=giniWide)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
if(!require(gridExtra)){
install.packages("gridExtra")
library(gridExtra)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(ggridges)){
install.packages("ggridges")
library(ggridges)
}
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
if(!require(viridis)){
install.packages("viridis")
library(viridis)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(reshape)){
install.packages("reshape")
library(reshape)
}
if(!require(reshape2)){
install.packages("reshape2")
library(reshape2)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
gini <- read.csv("gini.csv", na.string = "")
exeption <- -which(names(gini) %in% c("STRUCTURE", "STRUCTURE_ID", "STRUCTURE_NAME","ACTION", "FREQ", "Frequency.of.observation", "MEASURE", "Measure", "STATISTICAL_OPERATION", "Statistical.operation", "UNIT_MEASURE", "Unit.of.measure", "DEFINITION", "Definition", "POVERTY_LINE", "Poverty.line", "Time.period","Observation.value", "OBS_STATUS", "Observation.status", "UNIT_MULT", "Unit.multiplier", "CURRENCY", "Currency", "DECIMALS", "Decimals", "PRICE_BASE", "Price.base", "BASE_PER", "Base.period", "CONF_STATUS", "Confidentiality.status"))
gini <- gini[,exeption]
gini <- dcast(gini, REF_AREA+Age+AGE+TIME_PERIOD ~ Methodology, value.var = "OBS_VALUE")
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini$Gini_coefficient <- ifelse(
is.na(gini$`Income definition since 2012`),
gini$`Income definition until 2011`,
gini$`Income definition since 2012`
)
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini22 <- gini[gini$TIME_PERIOD==2022,]
gini22plot <- ggplot(gini22, aes(x=Age, y=Gini_coefficient, fill=REF_AREA))
ggplotly(gini22plot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22a <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA<="FRA",]
gini22aplot <- ggplot(gini22a, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22aplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22b <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="GBR" & gini$REF_AREA<="NLD",]
gini22bplot <- ggplot(gini22b, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22bplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22c <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="NOR",]
gini22cplot <- ggplot(gini22c, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22cplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
giniGr <- gini[gini$REF_AREA=="GRC",]
giniWide <- dcast(gini, REF_AREA+TIME_PERIOD~ Age, value.var = "Gini_coefficient")
giniAge <- ggplot(giniWide, aes(x=`From 18 to 65 years`, y=`Over 65 years`))
ggplotly(giniAge+geom_point(aes(colour = REF_AREA))+
geom_smooth())
cor(giniWide$`From 18 to 65 years`, giniWide$`Over 65 years`, use="complete.obs")
giniTotal <- gini[gini$AGE=="_T" ,]
giniTotalPlot <- ggplot(giniTotal, aes(x=TIME_PERIOD, y=Gini_coefficient, colour = REF_AREA))
#giniTotalPlot + geom_line()+scale_color_viridis_d()
ggplotly(giniTotalPlot + geom_line())
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniTotal$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniTotal[giniTotal$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = TIME_PERIOD, y = Gini_coefficient)) + geom_line()+
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
grid.arrange(plots[[45]], ncol = 2)
AEP2023 <- read.csv("AEP2023.csv", na.string = "")
giniAEP <- merge(giniTotal, AEP2023, by = c("TIME_PERIOD", "REF_AREA"))
giniAEP$GDP.per.capita <- giniAEP$OBS_VALUE
giniAEPPlot <- ggplot(giniAEP, aes(x=GDP.per.capita, y=Gini_coefficient))
giniAEPPlot + geom_point(aes(colour = REF_AREA))+  geom_smooth()
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
grid.arrange(plots[[45]], ncol = 2)
pop2022 <- read.csv("pop2022.csv", na.string = "")
giniAEPpop <- merge(giniAEP, pop2022, by = c("TIME_PERIOD", "REF_AREA"))
giniAEPpop$GDP <- giniAEPpop$OBS_VALUE.x*giniAEPpop$OBS_VALUE.y
giniAEPpopPlot <- ggplot(giniAEPpop, aes(x=GDP, y=Gini_coefficient))
giniAEPpopPlot + geom_point(aes(colour = REF_AREA))+  geom_smooth()
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEPpop$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEPpop[giniAEPpop$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
grid.arrange(plots[[45]], ncol = 2)
View(giniAEPpop)
names(giniAEPpop)
View(giniAEPpop)
View(giniAEP)
head(giniAEPpop)
head(giniAEP)
head(giniAEPpop)
View(giniAEPpop[,names(giniAEPpop)==OBS_VALUE.x])
View(giniAEPpop[,names(giniAEPpop)=="OBS_VALUE.x"])
View(giniAEPpop[,names(giniAEPpop)==c("OBS_VALUE.x","OBS_VALUE.y"])
View(giniAEPpop[,names(giniAEPpop)==c("OBS_VALUE.x","OBS_VALUE.y")])
View(giniAEPpop[,c("OBS_VALUE.x","OBS_VALUE.y")])
View(giniAEPpop[,c("OBS_VALUE.x","OBS_VALUE.y", "GDP")])
plot(giniAEPpop$OBS_VALUE.x,giniAEPpop$GDP)
View(giniAEPpop[,names(giniAEPpop)==c("OBS_VALUE.x","OBS_VALUE.y"])
View(giniAEPpop[,c("OBS_VALUE.x","OBS_VALUE.y", "GDP")])
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
x <- rnorm(1000, mean =4, sd=1)
x <- rnorm(1000, mean =4, sd=1)
xEPI2 <- 2*x
x <- rnorm(1000, mean =4, sd=1)
xSYN3 <- x+3
xPLIN1 <- x-1
xEPI2 <- 2*x
xDIA3 <- x/3
xEPIplin2 <- -2*x
myData <- data.frame(x= x, xSYN3=xSYN3, xPLIN1=xPLIN1, xEPI2=xEPI2, xDIA3=xDIA3, xEPIplin2=xEPIplin2)
View(myData)
xSYN3 <- x+3
myDataxSYN3 <- data.frame(x= x, xSYN3=xSYN3)
knitr::kable(head(myDataxSYN3, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
xPLIN1 <- x-1
myDataxPLIN1 <- data.frame(x= x, xPLIN1=xPLIN1)
knitr::kable(head(myDataxPLIN1, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
xEPI2 <- 2*x
myDataxEPI2 <- data.frame(x= x, xEPI2=xEPI2)
knitr::kable(head(myDataxEPI2, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
x <- rnorm(1000, mean =4, sd=1)
myDatax <- data.frame(x= x)
knitr::kable(head(myDatax, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
xSYN3 <- x+3
myDataxSYN3 <- data.frame(x= x, xSYN3=xSYN3)
knitr::kable(head(myDataxSYN3, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
xPLIN1 <- x-1
myDataxPLIN1 <- data.frame(x= x, xPLIN1=xPLIN1)
knitr::kable(head(myDataxPLIN1, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
xEPI2 <- 2*x
myDataxEPI2 <- data.frame(x= x, xEPI2=xEPI2)
knitr::kable(head(myDataxEPI2, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
xDIA3 <- x/3
myDataxDIA3 <- data.frame(x= x, xDIA3=xDIA3)
knitr::kable(head(myDataxDIA3, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
xEPIplin2 <- -2*x
myDataxEPIplin2 <- data.frame(x= x, xEPIplin2=xEPIplin2)
knitr::kable(head(myDataxEPIplin2, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
rmarkdown::render_site()
vec.x <- gen.logistic(mu = 3.55, iter = 2000)
if(!require(Chaos01)){
install.packages("Chaos01")
library(Chaos01)
}
vec.x <- gen.logistic(mu = 3.55, iter = 2000)
res2 <- testChaos01(vec.x, out = TRUE)
res2
results <- getVal(res2, vars = "both")
print(head(results))
#Get results of 0-1 test for Chaos when out = TRUE
K <- median(getVal(res2, vars = "Kc"))
elegxos01 <- function(values){
res2 <- testChaos01(values, out = TRUE)
K <- median(getVal(res2, vars = "Kc"))
K
}
elegxos01(vec.x)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
elegxos01 <- function(values){
res2 <- testChaos01(values, out = TRUE)
K <- median(getVal(res2, vars = "Kc"))
K
}
vec.x <- gen.logistic(mu = 3.55, iter = 2000)
elegxos01(vec.x)
gen.logistic(mu = 3.55, iter = 20)
generate_logistic_lists <- function(start_mu = 3.55, end_mu = 4, step = 0.001, iter = 2000) {
# Δημιουργία της ακολουθίας των τιμών του mu
mu_values <- seq(start_mu, end_mu, by = step)
# Δημιουργία της λίστας που θα περιέχει τις λίστες από τη gen.logistic
logistic_lists <- lapply(mu_values, function(mu) {
gen.logistic(mu = mu, iter = iter)
})
return(logistic_lists)
}
# Παράδειγμα κλήσης της συνάρτησης
result_lists <- generate_logistic_lists(start_mu = 3.55, end_mu = 4, step = 0.001, iter = 2000)
View(result_lists)
generate_logistic_lists <- function(start_mu = 3.55, end_mu = 4, step = 0.001, iter = 2000) {
# Δημιουργία της ακολουθίας των τιμών του mu
mu_values <- seq(start_mu, end_mu, by = step)
# Δημιουργία της λίστας που θα περιέχει τις λίστες από τη gen.logistic
logistic_lists <- lapply(mu_values, function(mu) {
gen.logistic(mu = mu, iter = iter)
})
return(logistic_lists)
}
# Παράδειγμα κλήσης της συνάρτησης
result_lists <- generate_logistic_lists(start_mu = 3.55, end_mu = 4, step = 0.001, iter = 2000)
elegxos01(result_lists)
if(!require(Chaos01)){
install.packages("Chaos01")
library(Chaos01)
}
elegxos01 <- function(values){
res2 <- testChaos01(values, out = TRUE)
K <- median(getVal(res2, vars = "Kc"))
K
}
vec.x <- gen.logistic(mu = 3.55, iter = 2000)
elegxos01(vec.x)
generate_logistic_lists <- function(start_mu = 3.55, end_mu = 4, step = 0.001, iter = 2000) {
# Δημιουργία της ακολουθίας των τιμών του mu
mu_values <- seq(start_mu, end_mu, by = step)
# Δημιουργία της λίστας που θα περιέχει τις λίστες από τη gen.logistic
logistic_lists <- lapply(mu_values, function(mu) {
gen.logistic(mu = mu, iter = iter)
})
return(logistic_lists)
}
# Παράδειγμα κλήσης της συνάρτησης
result_lists <- generate_logistic_lists(start_mu = 3.55, end_mu = 4, step = 0.001, iter = 2000)
elegxos01(result_lists)
# Εφαρμογή της MyFunc() σε κάθε λίστα της result_lists
new_list <- lapply(result_lists, elegxos01)
# Εφαρμογή της MyFunc() σε κάθε λίστα της result_lists
new_list <- lapply(result_lists, elegxos01)
View(new_list)
View(new_list)
class(new_list)
as.numeric(new_list)
# Εφαρμογή της MyFunc() σε κάθε λίστα της result_lists
new_list <- as.numeric(lapply(result_lists, elegxos01))
View(result_lists)
plot(new_list)
generate_logistic_lists <- function(start_mu = 3.55, end_mu = 4, step = 0.001, iter = 2000) {
# Δημιουργία της ακολουθίας των τιμών του mu
mu_values <- seq(start_mu, end_mu, by = step)
# Δημιουργία της λίστας που θα περιέχει τις λίστες από τη gen.logistic
logistic_lists <- lapply(mu_values, function(mu) {
gen.logistic(mu = mu, iter = iter)
})
return(logistic_lists)
}
# Παράδειγμα κλήσης της συνάρτησης
result_lists <- generate_logistic_lists(start_mu = 3.5, end_mu = 4, step = 0.001, iter = 2000)
# Εφαρμογή της MyFunc() σε κάθε λίστα της result_lists
new_list <- as.numeric(lapply(result_lists, elegxos01))
vList <- seq(3.5, 4, by = 0.001)
plot(vList,new_list)
vList <- seq(3.5, 4, by = 0.001)
plot(vList,new_list,type = "o")
vList <- seq(3.5, 4, by = 0.001)
plot(vList,new_list,type = "")
vList <- seq(3.5, 4, by = 0.001)
plot(vList,new_list,)
vList <- seq(3.5, 4, by = 0.001)
plot(vList,new_list,type = "l")
vList <- seq(3.5, 4, by = 0.001)
plot(vList,new_list,type = "l", xlab = "λ",
ylab = "K")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
x <- rnorm(1000, mean =4, sd=1)
myDatax <- data.frame(x= x)
knitr::kable(head(myDatax, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=x))
dataPlot + geom_boxplot()
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=x))
dataPlot + geom_boxplot() + geom_boxplot(outlier.shape = NA) + geom_jitter(shape=16, size=1,position=position_jitter(0.2))
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=x))
dataPlot + geom_boxplot() + geom_jitter(shape=16, size=1,position=position_jitter(0.2))
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=x))
dataPlot + geom_boxplot() + geom_boxplot(outlier.shape = NA) + geom_jitter(shape=16, size=1,position=position_jitter(0.2))
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=x))
dataPlot + geom_boxplot() + geom_boxplot(outlier.size = -1) + geom_jitter(shape=16, size=1,position=position_jitter(0.2))
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=x))
dataPlot + geom_boxplot() + geom_boxplot(outlier.shape = NA) + geom_jitter(shape=16, size=1,position=position_jitter(0.2))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
x <- rnorm(1000, mean =4, sd=1)
myDatax <- data.frame(x= x)
knitr::kable(head(myDatax, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=x))
dataPlot + geom_boxplot() + geom_boxplot(outlier.shape = NA) + geom_jitter(shape=16, size=1,position=position_jitter(0.2))
dataPlot +
geom_histogram(aes(y = after_stat(density))) +
geom_density(linewidth = 1, alpha = 0.6, fill = "green")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
xx <- rnorm(1000, mean =4, sd=1)
myDatax <- data.frame(xx= xx)
knitr::kable(head(myDatax, n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
dataPlot <- ggplot(myDatax, aes(x="", y=xx))
dataPlot + geom_boxplot() + geom_boxplot(outlier.shape = NA) + geom_jitter(shape=16, size=1,position=position_jitter(0.2))
dataPlot +
geom_histogram(aes(y = after_stat(density))) +
geom_density(linewidth = 1, alpha = 0.6, fill = "green")
dataPloth <- ggplot(myDatax, aes(x=xx))
dataPloth +
geom_histogram(aes(y = after_stat(density))) +
geom_density(linewidth = 1, alpha = 0.6, fill = "green")
rmarkdown::render_site()
rmarkdown::render_site()
1+1
rmarkdown::render_site()
rmarkdown::render_site()
