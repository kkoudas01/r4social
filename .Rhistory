knitr::kable(head(IsiAntimErg,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
names(IsiAntimErg)[names(IsiAntimErg) == "Country.Code"] <- "LOCATION"
names(IsiAntimErg)[names(IsiAntimErg) == "Year"] <- "TIME"
epipedoEkpALL <- epipedoEkp[epipedoEkp$SUBJECT == "TRY",]
EkpErgALL <- merge(IsiAntimErg, epipedoEkpALL, by = c("LOCATION","TIME"))
knitr::kable(head(EkpErgALL,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
wilcox.test(Value.y ~ Value.x, data = EkpErgALL)
if(!require(effsize)){
install.packages("effsize")
library(effsize)
}
cohen.d(Value.y ~ as.factor(Value.x), data = EkpErgALL)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
diabasma <- c(2, 3, 8, 6, 5, 6)
diab_apantEr <- c(5, 9, 10, 13, 8, 9)
diab_apantEr_dimiourgEr <- c(8, 6, 12, 11, 11, 12)
dedomena <- data.frame(DIABASMA=diabasma,
DIABASMA_APANTISI_EROTISEON=diab_apantEr,
DIABASMA_APANTISI_EROTISEON_DIMIOURGIA_ER=diab_apantEr_dimiourgEr)
dedomenaLong <- stack(dedomena)
knitr::kable(dedomenaLong) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
stratigikiANOVA <- aov(values ~ as.factor(ind), data = dedomenaLong)
summary(stratigikiANOVA)
kruskal.test(values ~ as.factor(ind), data = dedomenaLong)
rm(list = ls())
epipedoEkp <- read.csv("epipedoEkp.csv")
knitr::kable(head(epipedoEkp,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
IsiAntimErg <- read.csv("IsiAntimErg.csv")
knitr::kable(head(IsiAntimErg,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
names(IsiAntimErg)[names(IsiAntimErg) == "Country.Code"] <- "LOCATION"
names(IsiAntimErg)[names(IsiAntimErg) == "Year"] <- "TIME"
epipedoEkpALL <- epipedoEkp[epipedoEkp$SUBJECT == "TRY",]
EkpErgALL <- merge(IsiAntimErg, epipedoEkpALL, by = c("LOCATION","TIME"))
knitr::kable(head(EkpErgALL,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
wilcox.test(Value.y ~ Value.x, data = EkpErgALL)
if(!require(effsize)){
install.packages("effsize")
library(effsize)
}
cohen.d(Value.y ~ as.factor(Value.x), data = EkpErgALL)
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
wilcox_effsize(Value.y ~ as.factor(Value.x), data = EkpErgALL)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
diabasma <- c(2, 3, 8, 6, 5, 6)
diab_apantEr <- c(5, 9, 10, 13, 8, 9)
diab_apantEr_dimiourgEr <- c(8, 6, 12, 11, 11, 12)
dedomena <- data.frame(DIABASMA=diabasma,
DIABASMA_APANTISI_EROTISEON=diab_apantEr,
DIABASMA_APANTISI_EROTISEON_DIMIOURGIA_ER=diab_apantEr_dimiourgEr)
dedomenaLong <- stack(dedomena)
knitr::kable(dedomenaLong) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
stratigikiANOVA <- aov(values ~ as.factor(ind), data = dedomenaLong)
summary(stratigikiANOVA)
kruskal.test(values ~ as.factor(ind), data = dedomenaLong)
rm(list = ls())
epipedoEkp <- read.csv("epipedoEkp.csv")
knitr::kable(head(epipedoEkp,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
IsiAntimErg <- read.csv("IsiAntimErg.csv")
knitr::kable(head(IsiAntimErg,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
names(IsiAntimErg)[names(IsiAntimErg) == "Country.Code"] <- "LOCATION"
names(IsiAntimErg)[names(IsiAntimErg) == "Year"] <- "TIME"
epipedoEkpALL <- epipedoEkp[epipedoEkp$SUBJECT == "TRY",]
EkpErgALL <- merge(IsiAntimErg, epipedoEkpALL, by = c("LOCATION","TIME"))
knitr::kable(head(EkpErgALL,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
wilcox.test(Value.y ~ Value.x, data = EkpErgALL)
if(!require(effsize)){
install.packages("effsize")
library(effsize)
}
cohen.d(Value.y ~ as.factor(Value.x), data = EkpErgALL)
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
wilcox_effsize(Value.y ~ as.factor(Value.x), data = EkpErgALL)
wilcox_effsize(Value.y ~ Value.x, data = EkpErgALL)
wilcox_effsize(Value.y ~ Value.x, data = EkpErgALL)
if(!require(coin)){
install.packages("coin")
library(coin)
}
if(!require(coin)){
install.packages("coin")
library(coin)
}
wilcox_effsize(Value.y ~ Value.x, data = EkpErgALL)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
diabasma <- c(2, 3, 8, 6, 5, 6)
diab_apantEr <- c(5, 9, 10, 13, 8, 9)
diab_apantEr_dimiourgEr <- c(8, 6, 12, 11, 11, 12)
dedomena <- data.frame(DIABASMA=diabasma,
DIABASMA_APANTISI_EROTISEON=diab_apantEr,
DIABASMA_APANTISI_EROTISEON_DIMIOURGIA_ER=diab_apantEr_dimiourgEr)
dedomenaLong <- stack(dedomena)
knitr::kable(dedomenaLong) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "max-content", height = "200px")
stratigikiANOVA <- aov(values ~ as.factor(ind), data = dedomenaLong)
summary(stratigikiANOVA)
kruskal.test(values ~ as.factor(ind), data = dedomenaLong)
rm(list = ls())
epipedoEkp <- read.csv("epipedoEkp.csv")
knitr::kable(head(epipedoEkp,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
IsiAntimErg <- read.csv("IsiAntimErg.csv")
knitr::kable(head(IsiAntimErg,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
names(IsiAntimErg)[names(IsiAntimErg) == "Country.Code"] <- "LOCATION"
names(IsiAntimErg)[names(IsiAntimErg) == "Year"] <- "TIME"
epipedoEkpALL <- epipedoEkp[epipedoEkp$SUBJECT == "TRY",]
EkpErgALL <- merge(IsiAntimErg, epipedoEkpALL, by = c("LOCATION","TIME"))
knitr::kable(head(EkpErgALL,n=100)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
wilcox.test(Value.y ~ Value.x, data = EkpErgALL)
if(!require(effsize)){
install.packages("effsize")
library(effsize)
}
cohen.d(Value.y ~ as.factor(Value.x), data = EkpErgALL)
if(!require(coin)){
install.packages("coin")
library(coin)
}
wilcox_effsize(Value.y ~ Value.x, data = EkpErgALL)
wilcox_effsize(Value.y ~ as.factor(Value.x), data = EkpErgALL)
wilcox_effsize(Value.y ~ Value.x, data = EkpErgALL)
rmarkdown::render_site()
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
roll_dice <- function(n) {
# Δημιουργία ενός κενού διανύσματος για τα αποτελέσματα
results <- numeric(n)
# Επανάληψη για τον ρίξιμο των ζαριών n φορές
for (i in 1:n) {
# Ρίξιμο δύο ζαριών και καταγραφή του αθροίσματος
dice1 <- sample(1:6, 1, replace = TRUE)
dice2 <- sample(1:6, 1, replace = TRUE)
results[i] <- dice1 + dice2
}
return(results)
}
simulate_rolls <- function(n) {
# Ρίξιμο των ζαριών n φορές
rolls <- roll_dice(n)
# Υπολογισμός των συχνοτήτων των αθροισμάτων που ισούνται με 7 και 9
frequency_7 <- sum(rolls == 7) / n
frequency_9 <- sum(rolls == 9) / n
return(list(frequency_7 = frequency_7, frequency_9 = frequency_9))
}
# Ορισμός του αριθμού των επαναλήψεων
n_simulations <- 10000
# Προσομοίωση των ρίψεων και υπολογισμός των συχνοτήτων
results <- replicate(n_simulations, simulate_rolls(100))
# Ενοποίηση των αποτελεσμάτων σε ένα πλαίσιο δεδομένων
results_df <- data.frame(do.call(rbind, results))
# Εισαγωγή του πακέτου ggplot2 για τη δημιουργία γραφημάτων
library(ggplot2)
# Δημιουργία γραφήματος
plot <- ggplot(results_df, aes(x = 1:n_simulations)) +
geom_line(aes(y = frequency_7, color = "Frequency of 7")) +
geom_line(aes(y = frequency_9, color = "Frequency of 9")) +
scale_color_manual(values = c("Frequency of 7" = "blue", "Frequency of 9" = "red")) +
labs(x = "Number of Simulations", y = "Frequency", color = "Outcome") +
theme_minimal()
# Εκτύπωση του γραφήματος
print(plot)
roll_dice <- function(n) {
# Δημιουργία ενός κενού διανύσματος για τα αποτελέσματα
results <- numeric(n)
# Επανάληψη για τον ρίξιμο των ζαριών n φορές
for (i in 1:n) {
# Ρίξιμο δύο ζαριών και καταγραφή του αθροίσματος
dice1 <- sample(1:6, 1, replace = TRUE)
dice2 <- sample(1:6, 1, replace = TRUE)
results[i] <- dice1 + dice2
}
return(results)
}
simulate_rolls <- function(n) {
# Ρίξιμο των ζαριών n φορές
rolls <- roll_dice(n)
# Υπολογισμός των συχνοτήτων των αθροισμάτων που ισούνται με 7 και 9
frequency_7 <- sum(rolls == 7) / n
frequency_9 <- sum(rolls == 9) / n
return(list(frequency_7 = frequency_7, frequency_9 = frequency_9))
}
# Ορισμός του αριθμού των επαναλήψεων
n_simulations <- 10000
# Προσομοίωση των ρίψεων και υπολογισμός των συχνοτήτων
results <- replicate(n_simulations, simulate_rolls(100))
# Ενοποίηση των αποτελεσμάτων σε ένα πλαίσιο δεδομένων
results_df <- data.frame(do.call(rbind, results))
# Εισαγωγή του πακέτου ggplot2 για τη δημιουργία γραφημάτων
library(ggplot2)
# Δημιουργία γραφήματος
plot <- ggplot(results_df, aes(x = 1:n_simulations)) +
geom_line(aes(y = frequency_7, color = "Frequency of 7")) +
geom_line(aes(y = frequency_9, color = "Frequency of 9")) +
scale_color_manual(values = c("Frequency of 7" = "blue", "Frequency of 9" = "red")) +
labs(x = "Number of Simulations", y = "Frequency", color = "Outcome") +
theme_minimal()
# Εκτύπωση του γραφήματος
print(plot)
roll_dice <- function(n) {
# Δημιουργία ενός κενού διανύσματος για τα αποτελέσματα
results <- numeric(n)
# Επανάληψη για τον ρίξιμο των ζαριών n φορές
for (i in 1:n) {
# Ρίξιμο δύο ζαριών και καταγραφή του αθροίσματος
dice1 <- sample(1:6, 1, replace = TRUE)
dice2 <- sample(1:6, 1, replace = TRUE)
results[i] <- dice1 + dice2
}
return(results)
}
simulate_rolls <- function(n) {
# Ρίξιμο των ζαριών n φορές
rolls <- roll_dice(n)
# Υπολογισμός των συχνοτήτων των αθροισμάτων που ισούνται με 7 και 9
frequency_7 <- sum(rolls == 7) / n
frequency_9 <- sum(rolls == 9) / n
return(list(frequency_7 = frequency_7, frequency_9 = frequency_9))
}
# Ορισμός του αριθμού των επαναλήψεων
n_simulations <- 10000
# Προσομοίωση των ρίψεων και υπολογισμός των συχνοτήτων
results <- replicate(n_simulations, simulate_rolls(100))
# Ενοποίηση των αποτελεσμάτων σε ένα πλαίσιο δεδομένων
results_df <- data.frame(do.call(rbind, results))
# Εισαγωγή του πακέτου ggplot2 για τη δημιουργία γραφημάτων
library(ggplot2)
# Δημιουργία γραφήματος
plot <- ggplot(results_df, aes(x = 1:n_simulations)) +
geom_line(aes(y = frequency_7, color = "Frequency of 7")) +
geom_line(aes(y = frequency_9, color = "Frequency of 9")) +
scale_color_manual(values = c("Frequency of 7" = "blue", "Frequency of 9" = "red")) +
labs(x = "Number of Simulations", y = "Frequency", color = "Outcome") +
theme_minimal()
# Εκτύπωση του γραφήματος
print(plot)
roll_dice <- function(n) {
# Δημιουργία ενός κενού διανύσματος για τα αποτελέσματα
results <- numeric(n)
# Επανάληψη για τον ρίξιμο των ζαριών n φορές
for (i in 1:n) {
# Ρίξιμο δύο ζαριών και καταγραφή του αθροίσματος
dice1 <- sample(1:6, 1, replace = TRUE)
dice2 <- sample(1:6, 1, replace = TRUE)
results[i] <- dice1 + dice2
}
return(results)
}
simulate_rolls <- function(n) {
# Ρίξιμο των ζαριών n φορές
rolls <- roll_dice(n)
# Υπολογισμός των συχνοτήτων των αθροισμάτων που ισούνται με 7 και 9
frequency_7 <- sum(rolls == 7) / n
frequency_9 <- sum(rolls == 9) / n
return(list(frequency_7 = frequency_7, frequency_9 = frequency_9))
}
# Ορισμός του αριθμού των επαναλήψεων
n_simulations <- 100
# Προσομοίωση των ρίψεων και υπολογισμός των συχνοτήτων
results <- replicate(n_simulations, simulate_rolls(100))
# Ενοποίηση των αποτελεσμάτων σε ένα πλαίσιο δεδομένων
results_df <- data.frame(do.call(rbind, results))
# Εισαγωγή του πακέτου ggplot2 για τη δημιουργία γραφημάτων
library(ggplot2)
# Δημιουργία γραφήματος
plot <- ggplot(results_df, aes(x = 1:n_simulations)) +
geom_line(aes(y = frequency_7, color = "Frequency of 7")) +
geom_line(aes(y = frequency_9, color = "Frequency of 9")) +
scale_color_manual(values = c("Frequency of 7" = "blue", "Frequency of 9" = "red")) +
labs(x = "Number of Simulations", y = "Frequency", color = "Outcome") +
theme_minimal()
# Εκτύπωση του γραφήματος
print(plot)
library(animation)
install.packages("animation")
library(animation)
flips <- as.integer(readline("Πόσες ρίψεις;"))
time <- as.integer(readline("Πόσα δευτερόλεπτα gif;"))
coin_freq <- function(frame) {
frame <- as.integer(frame)
s <- 0
if (frame != 0) {
for (i in 1:frame) {
s <- s + sample(c(0, 1), 1)
}
s <- (s * 100) / frame
}
return(s)
}
init <- function() {
plot(1, type='n', xlim=c(0, flips), ylim=c(0, 100))
}
animate <- function(i) {
xdata <- c(1:i)
ydata <- sapply(xdata, coin_freq)
lines(xdata, ydata, col='blue', lwd=3)
}
my_int <- (time * 1000) / flips
saveGIF({
ani.options(interval=my_int)
for (i in 1:flips) {
animate(i)
}
}, movie.name="coin_flip.gif", interval=my_int)
install.packages("animation")
library(animation)
flips <- 100  # Αριθμός ρίψεων
time <- 5     # Διάρκεια του gif σε δευτερόλεπτα
coin_freq <- function(frame) {
s <- sum(sample(c(0, 1), frame, replace=TRUE))
return((s * 100) / frame)
}
animate <- function() {
my_int <- (time * 1000) / flips
init <- function() {
plot(1, type='n', xlim=c(0, flips), ylim=c(0, 100))
}
ani <- saveGIF({
ani.options(interval=my_int)
for (i in 1:flips) {
xdata <- c(1:i)
ydata <- sapply(xdata, coin_freq)
lines(xdata, ydata, col='blue', lwd=3)
}
}, movie.name="coin_flip.gif", interval=my_int)
return(ani)
}
animate()
install.packages("animation")
library(animation)
flips <- 100  # Αριθμός ρίψεων
time <- 5     # Διάρκεια του gif σε δευτερόλεπτα
coin_freq <- function(frame) {
s <- sum(sample(c(0, 1), frame, replace=TRUE))
return((s * 100) / frame)
}
animate <- function() {
my_int <- (time * 1000) / flips
init <- function() {
plot(1, type='n', xlim=c(0, flips), ylim=c(0, 100))
}
ani <- saveGIF({
ani.options(interval=my_int)
for (i in 1:flips) {
xdata <- c(1:i)
ydata <- sapply(xdata, coin_freq)
lines(xdata, ydata, col='blue', lwd=3)
}
}, movie.name="coin_flip.gif", interval=my_int)
return(ani)
}
animate()
library(animation)
flips <- 100  # Αριθμός ρίψεων
time <- 5     # Διάρκεια του gif σε δευτερόλεπτα
coin_freq <- function(frame) {
s <- sum(sample(c(0, 1), frame, replace=TRUE))
return((s * 100) / frame)
}
animate <- function() {
my_int <- (time * 1000) / flips
init <- function() {
plot.new()  # Καλέστε την plot.new() πριν την plot()
plot(1, type='n', xlim=c(0, flips), ylim=c(0, 100))
}
ani <- saveGIF({
ani.options(interval=my_int)
for (i in 1:flips) {
xdata <- c(1:i)
ydata <- sapply(xdata, coin_freq)
lines(xdata, ydata, col='blue', lwd=3)
}
}, movie.name="coin_flip.gif", interval=my_int)
return(ani)
}
animate()
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
zari <- c(".", ":", "...", "::", ":.:",  ":::")
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(i)
xilies_zaries <- sample(zari, 10000, replace = TRUE)
pin_syxn <- table(xilies_zaries)
barplot(pin_syxn, names.arg = zari)
}
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(i)
xilies_zaries <- sample(zari, 10000, replace = TRUE)
pin_syxn <- table(xilies_zaries)
barplot(pin_syxn, names.arg = zari)
}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
fores <- 0:10
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(100*i)
xilia_paixnidia <- rbinom(1000, size = 10, prob = 1 / 6)
pin_syxn <- table(factor(xilia_paixnidia, levels=fores))
barplot(pin_syxn, names.arg = fores)
}
fores <- 0:10
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(100*i)
xilia_paixnidia <- rbinom(1000, size = 10, prob = 1 / 6)
pin_syxn <- table(factor(xilia_paixnidia, levels=fores))
barplot(pin_syxn, names.arg = fores)
}
dbinom(3, size=10, prob=1/6)
dbinom(4, size=10, prob=1/6)
fores <- 0:10
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(100*i)
xilia_paixnidia <- rbinom(1000, size = 10, prob = 1 / 6)
pin_syxn <- table(factor(xilia_paixnidia, levels=fores))
barplot(pin_syxn, names.arg = fores)
}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
plithos_figoures <- 0:5
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(100*i)
xilia_paixnidia <- rhyper(1000, 12, 40, 5)
pin_syxn <- table(factor(xilia_paixnidia, levels=plithos_figoures))
barplot(pin_syxn, names.arg = plithos_figoures)
}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
plithos_figoures <- 0:5
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(100*i)
xilia_paixnidia <- rhyper(1000, 12, 40, 5)
pin_syxn <- table(factor(xilia_paixnidia, levels=plithos_figoures))
barplot(pin_syxn, names.arg = plithos_figoures)
}
dhyper(3, 12, 40, 5)
dhyper(2, 40, 12, 5)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(100*i)
xilia_paixnidia <- rgeom(1000, 1/6)
pin_syxn <- table(xilia_paixnidia)
barplot(pin_syxn)
}
dgeom(7, 1/6)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
par( mfrow= c(2,2) )
for (i in 1:4) {
set.seed(100*i)
xilia_paixnidia <- rgeom(1000, 1/6)
pin_syxn <- table(xilia_paixnidia)
barplot(pin_syxn)
}
dgeom(7, 1/6)
