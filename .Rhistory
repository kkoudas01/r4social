order(unique(giniAEP$REF_AREA))
sort(unique(giniAEP$REF_AREA))
length(unique(giniAEP$REF_AREA))
plots <- c()
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:45){
giniAEPgr <- giniAEP[giniAEP$REF_AREA==counties[i],]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x=GDP.per.capita, y=Gini_coefficient))
plots[i] <- giniAEPgrPlot + geom_point()+  geom_smooth()
}
counties[3]
plots <- c()
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:45){
giniAEPgr <- giniAEP[giniAEP$REF_AREA==counties[i],]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x=GDP.per.capita, y=Gini_coefficient))
}
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
do.call(grid.arrange, c(plots, ncol = 2))
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
do.call(grid.arrange, c(plots, ncol = 2, nrow=23))
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
grid.arrange(c(plots, ncol = 2)
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
grid.arrange(plots, ncol = 2)
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
grid.arrange(plots[[1]], plots[[2]], plots[[3]], ncol = 2)
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], plots[[7]], plots[[8]], plots[[9]], plots[[10]], plots[[11]], plots[[12]], plots[[13]], plots[[14]], plots[[15]], plots[[16]], plots[[17]], plots[[18]], plots[[19]], plots[[20]], plots[[21]], plots[[22]], plots[[23]], plots[[24]], plots[[25]], plots[[26]], plots[[27]], plots[[28]], plots[[29]], plots[[30]], plots[[31]], plots[[33]], plots[[34]], plots[[35]], plots[[36]], plots[[37]], plots[[38]], plots[[39]], plots[[40]], plots[[41]], plots[[42]], plots[[43]], plots[[44]], plots[[45]], ncol = 2)
grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 2)
grid.arrange(plots[[7]], plots[[8]], plots[[9]], plots[[10]], plots[[11]], plots[[12]], ncol = 2)
grid.arrange( plots[[13]], plots[[14]], plots[[15]], plots[[16]], plots[[17]], plots[[18]], ncol = 2)
grid.arrange( plots[[19]], plots[[20]], plots[[21]], plots[[22]], plots[[23]], plots[[24]], ncol = 2)
grid.arrange( plots[[25]], plots[[26]], plots[[27]], plots[[28]], plots[[29]], plots[[30]], ncol = 2)
grid.arrange(plots[[31]], plots[[33]], plots[[34]], plots[[35]], plots[[36]], ncol = 2)
grid.arrange(plots[[31]], plots[[32]], plots[[33]], plots[[34]], plots[[35]], plots[[36]], ncol = 2)
grid.arrange(plots[[37]], plots[[38]], plots[[39]], plots[[40]], plots[[41]], plots[[42]], plots[[43]], plots[[44]], plots[[45]], ncol = 2)
grid.arrange(plots[[37]], plots[[38]], plots[[39]], plots[[40]], plots[[41]], plots[[42]], ncol = 2)
grid.arrange(plots[[43]], plots[[44]], plots[[45]], ncol = 2)
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEPpop$REF_AREA))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
if(!require(gridExtra)){
install.packages("gridExtra")
library(gridExtra)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(ggridges)){
install.packages("ggridges")
library(ggridges)
}
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
if(!require(viridis)){
install.packages("viridis")
library(viridis)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(reshape)){
install.packages("reshape")
library(reshape)
}
if(!require(reshape2)){
install.packages("reshape2")
library(reshape2)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
gini <- read.csv("gini.csv", na.string = "")
exeption <- -which(names(gini) %in% c("STRUCTURE", "STRUCTURE_ID", "STRUCTURE_NAME","ACTION", "FREQ", "Frequency.of.observation", "MEASURE", "Measure", "STATISTICAL_OPERATION", "Statistical.operation", "UNIT_MEASURE", "Unit.of.measure", "DEFINITION", "Definition", "POVERTY_LINE", "Poverty.line", "Time.period","Observation.value", "OBS_STATUS", "Observation.status", "UNIT_MULT", "Unit.multiplier", "CURRENCY", "Currency", "DECIMALS", "Decimals", "PRICE_BASE", "Price.base", "BASE_PER", "Base.period", "CONF_STATUS", "Confidentiality.status"))
gini <- gini[,exeption]
gini <- dcast(gini, REF_AREA+Age+AGE+TIME_PERIOD ~ Methodology, value.var = "OBS_VALUE")
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini$Gini_coefficient <- ifelse(
is.na(gini$`Income definition since 2012`),
gini$`Income definition until 2011`,
gini$`Income definition since 2012`
)
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini22 <- gini[gini$TIME_PERIOD==2022,]
gini22plot <- ggplot(gini22, aes(x=Age, y=Gini_coefficient, fill=REF_AREA))
ggplotly(gini22plot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22a <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA<="FRA",]
gini22aplot <- ggplot(gini22a, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22aplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22b <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="GBR" & gini$REF_AREA<="NLD",]
gini22bplot <- ggplot(gini22b, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22bplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22c <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="NOR",]
gini22cplot <- ggplot(gini22c, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22cplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
giniTotal <- gini[gini$AGE=="_T" ,]
giniTotalPlot <- ggplot(giniTotal, aes(x=TIME_PERIOD, y=Gini_coefficient, colour = REF_AREA))
#giniTotalPlot + geom_line()+scale_color_viridis_d()
ggplotly(giniTotalPlot + geom_line()+scale_color_viridis_d())
giniTotalPlot2 <- ggplot(giniTotal, aes(x = Gini_coefficient, y = as.factor(REF_AREA), fill = after_stat(x)))
giniTotalPlot2 +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = "ώρες", option = "C")
AEP2023 <- read.csv("AEP2023.csv", na.string = "")
giniAEP <- merge(giniTotal, AEP2023, by = c("TIME_PERIOD", "REF_AREA"))
giniAEP$GDP.per.capita <- giniAEP$OBS_VALUE
giniAEPPlot <- ggplot(giniAEP, aes(x=GDP.per.capita, y=Gini_coefficient))
giniAEPPlot + geom_point(aes(colour = REF_AREA))+  geom_smooth()
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 2)
grid.arrange(plots[[7]], plots[[8]], plots[[9]], plots[[10]], plots[[11]], plots[[12]], ncol = 2)
grid.arrange( plots[[13]], plots[[14]], plots[[15]], plots[[16]], plots[[17]], plots[[18]], ncol = 2)
grid.arrange( plots[[19]], plots[[20]], plots[[21]], plots[[22]], plots[[23]], plots[[24]], ncol = 2)
grid.arrange( plots[[25]], plots[[26]], plots[[27]], plots[[28]], plots[[29]], plots[[30]], ncol = 2)
grid.arrange(plots[[31]], plots[[32]], plots[[33]], plots[[34]], plots[[35]], plots[[36]], ncol = 2)
grid.arrange(plots[[37]], plots[[38]], plots[[39]], plots[[40]], plots[[41]], plots[[42]], ncol = 2)
grid.arrange(plots[[43]], plots[[44]], plots[[45]], ncol = 2)
giniAEPgr <- giniAEP[giniAEP$REF_AREA=="GRC",]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x=GDP.per.capita, y=Gini_coefficient))
giniAEPisr <- giniAEP[giniAEP$REF_AREA=="ISR",]
giniAEPisrPlot <- ggplot(giniAEPisr, aes(x=GDP.per.capita, y=Gini_coefficient))
plot1 <- giniAEPgrPlot + geom_point()+  geom_smooth()
plot2 <- giniAEPisrPlot + geom_point()+  geom_smooth()
grid.arrange(plot1, plot2, ncol=2)
if(!require(GWalkR)){
install.packages("GWalkR")
library(GWalkR)
}
interactiveAEPpc <- data.frame(TIME_PERIOD=giniAEP$TIME_PERIOD, REF_AREA=giniAEP$REF_AREA, Gini_coefficient=giniAEP$Gini_coefficient, GDP.per.capita=giniAEP$GDP.per.capita)
gwalkr(interactiveAEPpc)
pop2022 <- read.csv("pop2022.csv", na.string = "")
giniAEPpop <- merge(giniAEP, pop2022, by = c("TIME_PERIOD", "REF_AREA"))
giniAEPpop$GDP <- giniAEPpop$OBS_VALUE.x*giniAEPpop$OBS_VALUE.y
giniAEPpopPlot <- ggplot(giniAEPpop, aes(x=GDP, y=Gini_coefficient))
giniAEPpopPlot + geom_point(aes(colour = REF_AREA))+  geom_smooth()
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEPpop$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 2)
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEPpop$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEPpop[giniAEPpop$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPpop, aes(x = GDP, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 2)
grid.arrange(plots[[1]], plots[[2]], ncol = 2)
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
counties[[45]]
counties[[46]]
grid.arrange(plots[[43]], plots[[44]], plots[[45]], ncol = 2)
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
grid.arrange(plots[[45]], ncol = 2)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
if(!require(gridExtra)){
install.packages("gridExtra")
library(gridExtra)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(ggridges)){
install.packages("ggridges")
library(ggridges)
}
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
if(!require(viridis)){
install.packages("viridis")
library(viridis)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(reshape)){
install.packages("reshape")
library(reshape)
}
if(!require(reshape2)){
install.packages("reshape2")
library(reshape2)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
gini <- read.csv("gini.csv", na.string = "")
exeption <- -which(names(gini) %in% c("STRUCTURE", "STRUCTURE_ID", "STRUCTURE_NAME","ACTION", "FREQ", "Frequency.of.observation", "MEASURE", "Measure", "STATISTICAL_OPERATION", "Statistical.operation", "UNIT_MEASURE", "Unit.of.measure", "DEFINITION", "Definition", "POVERTY_LINE", "Poverty.line", "Time.period","Observation.value", "OBS_STATUS", "Observation.status", "UNIT_MULT", "Unit.multiplier", "CURRENCY", "Currency", "DECIMALS", "Decimals", "PRICE_BASE", "Price.base", "BASE_PER", "Base.period", "CONF_STATUS", "Confidentiality.status"))
gini <- gini[,exeption]
gini <- dcast(gini, REF_AREA+Age+AGE+TIME_PERIOD ~ Methodology, value.var = "OBS_VALUE")
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini$Gini_coefficient <- ifelse(
is.na(gini$`Income definition since 2012`),
gini$`Income definition until 2011`,
gini$`Income definition since 2012`
)
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini22 <- gini[gini$TIME_PERIOD==2022,]
gini22plot <- ggplot(gini22, aes(x=Age, y=Gini_coefficient, fill=REF_AREA))
ggplotly(gini22plot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22a <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA<="FRA",]
gini22aplot <- ggplot(gini22a, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22aplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22b <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="GBR" & gini$REF_AREA<="NLD",]
gini22bplot <- ggplot(gini22b, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22bplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22c <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="NOR",]
gini22cplot <- ggplot(gini22c, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22cplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
giniTotal <- gini[gini$AGE=="_T" ,]
giniTotalPlot <- ggplot(giniTotal, aes(x=TIME_PERIOD, y=Gini_coefficient, colour = REF_AREA))
#giniTotalPlot + geom_line()+scale_color_viridis_d()
ggplotly(giniTotalPlot + geom_line()+scale_color_viridis_d())
giniTotalPlot2 <- ggplot(giniTotal, aes(x = Gini_coefficient, y = as.factor(REF_AREA), fill = after_stat(x)))
giniTotalPlot2 +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) +
scale_x_continuous(expand = c(0.01, 0)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_fill_viridis(name = "ώρες", option = "C")
AEP2023 <- read.csv("AEP2023.csv", na.string = "")
giniAEP <- merge(giniTotal, AEP2023, by = c("TIME_PERIOD", "REF_AREA"))
giniAEP$GDP.per.capita <- giniAEP$OBS_VALUE
giniAEPPlot <- ggplot(giniAEP, aes(x=GDP.per.capita, y=Gini_coefficient))
giniAEPPlot + geom_point(aes(colour = REF_AREA))+  geom_smooth()
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEP$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniAEP$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = GDP.per.capita, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
grid.arrange(plots[[45]], ncol = 2)
giniAEPgr <- giniAEP[giniAEP$REF_AREA=="GRC",]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x=GDP.per.capita, y=Gini_coefficient))
giniAEPisr <- giniAEP[giniAEP$REF_AREA=="ISR",]
giniAEPisrPlot <- ggplot(giniAEPisr, aes(x=GDP.per.capita, y=Gini_coefficient))
plot1 <- giniAEPgrPlot + geom_point()+  geom_smooth()
plot2 <- giniAEPisrPlot + geom_point()+  geom_smooth()
grid.arrange(plot1, plot2, ncol=2)
if(!require(GWalkR)){
install.packages("GWalkR")
library(GWalkR)
}
interactiveAEPpc <- data.frame(TIME_PERIOD=giniAEP$TIME_PERIOD, REF_AREA=giniAEP$REF_AREA, Gini_coefficient=giniAEP$Gini_coefficient, GDP.per.capita=giniAEP$GDP.per.capita)
gwalkr(interactiveAEPpc)
pop2022 <- read.csv("pop2022.csv", na.string = "")
giniAEPpop <- merge(giniAEP, pop2022, by = c("TIME_PERIOD", "REF_AREA"))
giniAEPpop$GDP <- giniAEPpop$OBS_VALUE.x*giniAEPpop$OBS_VALUE.y
giniAEPpopPlot <- ggplot(giniAEPpop, aes(x=GDP, y=Gini_coefficient))
giniAEPpopPlot + geom_point(aes(colour = REF_AREA))+  geom_smooth()
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniAEPpop$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniAEPpop[giniAEPpop$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPpop, aes(x = GDP, y = Gini_coefficient)) +
geom_point() +
geom_smooth() +
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
grid.arrange(plots[[45]], ncol = 2)
interactiveAEP <- data.frame(TIME_PERIOD=giniAEPpop$TIME_PERIOD, REF_AREA=giniAEPpop$REF_AREA, Gini_coefficient=giniAEPpop$Gini_coefficient, GDP=giniAEPpop$GDP)
gwalkr(interactiveAEP)
giniGr <- gini[gini$REF_AREA=="GRC",]
giniGrPlot <- ggplot(giniGr, aes(x=TIME_PERIOD, y=Gini_coefficient, colour = Age))
giniGrPlot + geom_line()
giniWide <- dcast(gini, REF_AREA+TIME_PERIOD~ Age, value.var = "Gini_coefficient")
giniAge <- ggplot(giniWide, aes(x=`From 18 to 65 years`, y=`Over 65 years`))
ggplotly(giniAge+geom_point(aes(colour = REF_AREA))+
geom_smooth())
cor(giniWide$`From 18 to 65 years`, giniWide$`Over 65 years`, use="complete.obs")
lm(giniWide$`From 18 to 65 years` ~ giniWide$`Over 65 years`)
giniTotalPlot <- ggplot(giniTotal, aes(x=TIME_PERIOD, y=Gini_coefficient, colour = REF_AREA))
#giniTotalPlot + geom_line()+scale_color_viridis_d()
ggplotly(giniTotalPlot + geom_line())
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniTotal$REF_AREA))
giniTotalPlot <- ggplot(giniTotal, aes(x=TIME_PERIOD, y=Gini_coefficient, colour = REF_AREA))
giniTotalPlot + geom_line()
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniTotal$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = TIME_PERIOD, y = Gini_coefficient)) + geom_line()+
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
rm(list = ls())
if(!require(gridExtra)){
install.packages("gridExtra")
library(gridExtra)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(ggridges)){
install.packages("ggridges")
library(ggridges)
}
if(!require(rstatix)){
install.packages("rstatix")
library(rstatix)
}
if(!require(viridis)){
install.packages("viridis")
library(viridis)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(reshape)){
install.packages("reshape")
library(reshape)
}
if(!require(reshape2)){
install.packages("reshape2")
library(reshape2)
}
if(!require(plotly)){
install.packages("plotly")
library(plotly)
}
gini <- read.csv("gini.csv", na.string = "")
exeption <- -which(names(gini) %in% c("STRUCTURE", "STRUCTURE_ID", "STRUCTURE_NAME","ACTION", "FREQ", "Frequency.of.observation", "MEASURE", "Measure", "STATISTICAL_OPERATION", "Statistical.operation", "UNIT_MEASURE", "Unit.of.measure", "DEFINITION", "Definition", "POVERTY_LINE", "Poverty.line", "Time.period","Observation.value", "OBS_STATUS", "Observation.status", "UNIT_MULT", "Unit.multiplier", "CURRENCY", "Currency", "DECIMALS", "Decimals", "PRICE_BASE", "Price.base", "BASE_PER", "Base.period", "CONF_STATUS", "Confidentiality.status"))
gini <- gini[,exeption]
gini <- dcast(gini, REF_AREA+Age+AGE+TIME_PERIOD ~ Methodology, value.var = "OBS_VALUE")
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini$Gini_coefficient <- ifelse(
is.na(gini$`Income definition since 2012`),
gini$`Income definition until 2011`,
gini$`Income definition since 2012`
)
knitr::kable(head(gini)) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
gini22 <- gini[gini$TIME_PERIOD==2022,]
gini22plot <- ggplot(gini22, aes(x=Age, y=Gini_coefficient, fill=REF_AREA))
ggplotly(gini22plot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22a <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA<="FRA",]
gini22aplot <- ggplot(gini22a, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22aplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22b <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="GBR" & gini$REF_AREA<="NLD",]
gini22bplot <- ggplot(gini22b, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22bplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
gini22c <- gini[gini$TIME_PERIOD==2022 & gini$REF_AREA>="NOR",]
gini22cplot <- ggplot(gini22c, aes(x=REF_AREA, y=Gini_coefficient, fill=Age))
ggplotly(gini22cplot+geom_bar(stat="identity", position=position_dodge(), colour="black"))
giniTotal <- gini[gini$AGE=="_T" ,]
giniTotalPlot <- ggplot(giniTotal, aes(x=TIME_PERIOD, y=Gini_coefficient, colour = REF_AREA))
#giniTotalPlot + geom_line()+scale_color_viridis_d()
ggplotly(giniTotalPlot + geom_line())
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniTotal$REF_AREA))
giniTotalPlot + geom_line()
for (i in 1:length(counties)) {
giniAEPgr <- giniAEP[giniTotal$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = TIME_PERIOD, y = Gini_coefficient)) + geom_line()+
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniTotal$REF_AREA))
giniTotalPlot + geom_line()
for (i in 1:length(counties)) {
giniAEPgr <- giniTotal[giniTotal$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = TIME_PERIOD, y = Gini_coefficient)) + geom_line()+
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
for (i in 1:22){
grid.arrange(plots[[2*i-1]], plots[[2*i]], ncol = 2)
}
grid.arrange(plots[[45]], ncol = 2)
plots <- list()  # Χρήση λίστας αντί για vector
counties <- sort(unique(giniTotal$REF_AREA))
for (i in 1:length(counties)) {
giniAEPgr <- giniTotal[giniTotal$REF_AREA == counties[i], ]
giniAEPgrPlot <- ggplot(giniAEPgr, aes(x = TIME_PERIOD, y = Gini_coefficient)) + geom_line()+
ggtitle(paste("Country:", counties[i])) +
theme_minimal()
plots[[i]] <- giniAEPgrPlot  # Αποθήκευση στο i-οστό στοιχείο της λίστας
}
length(unique(giniTotal$REF_AREA))
